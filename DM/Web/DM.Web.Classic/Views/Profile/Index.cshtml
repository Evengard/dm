@using DM.Web.Classic.Extensions.IconFontExtensions
@using DM.Web.Classic.Extensions.UserExtensions
@using DM.Web.Classic.ViewComponents.Shared.HumanDate
@using DM.Web.Classic.Views.Profile
@using Microsoft.AspNetCore.Routing
@model DM.Web.Classic.Views.Profile.ProfileViewModel

@{
    ViewBag.Title = $"{Model.User.Login} | Личный кабинет";
    Layout = "~/Views/Shared/Layout/_TwoColumnLayout.cshtml";

    var warningsClass = "";

    if (Model.WarningsCount > 0 && Model.WarningsCount < 6)
    {
        warningsClass = "profile-field-warnings-active";
    }
    else if (Model.WarningsCount >= 6)
    {
        warningsClass = "profile-field-warnings-bannable";
    }
}

@section LeftColumn
{
    @await Html.PartialAsync("Layout/GeneralLeftColumn")
}

<h2 class="content-pageTitle">
    @Model.User.Login
    <div class="profile-roles date">@Model.Role</div>
</h2>

<div class="profile-mainInfo">

    <div class="js-picture-upload profile-picture">
        <img class="profile-picture-image" id="Picture" data-default-url="@Url.Content("~/images/avatar_placeholder.jpg")"
             src="@(Model.ProfilePictureUrl ?? Url.Content("~/images/avatar_placeholder.jpg"))" onerror="this.src = this.getAttribute('data-default-url')"/>
        @if (Model.CanEdit)
        {
            @await Html.PartialAsync("~/Views/Profile/Upload/UploadForm.cshtml", Model.UserId)
            <a href="@Url.Action("RemovePicture", "ProfilePictureUpload")" class="picture-clear" id="PictureClearLink">@IconFont.Render(IconType.Close)</a>
        }
    </div>

    @if (Model.CanEdit)
    {
        @await Html.PartialAsync("ProfileDataField", Model, new ViewDataDictionary(ViewData) {{"Type", PersonalDataField.Status}, {"Value", Model.Status}, {"Undefined", "статус не указан"}})
    }
    else
    {
        <div class="profile-status">@Model.Status</div>
    }

    <div class="profile-field-wrapper">
        <div class="profile-field-label">На сайте с</div>
        <div class="profile-field-value">@await Component.InvokeAsync(nameof(DateFormat), new {date = Model.RegistrationDate})</div>
    </div>
    <div class="profile-field-wrapper">
        <div class="profile-field-label">Рейтинг</div>
        <div class="profile-field-value">@Html.RatingLink(Model.User)</div>
    </div>
    @if (Model.VotesCount > 0)
    {
        <div class="profile-field-wrapper">
            <div class="profile-field-label">Отдано голосов</div>
            <div class="profile-field-value">@Html.ActionLink(Model.VotesCount.ToString(), "UserVotes", "Votes", new RouteValueDictionary {{"login", Model.User.Login}}, null)</div>
        </div>
    }
    <div class="profile-field-wrapper">
        <div class="profile-field-label">В сети</div>
        <div class="profile-field-value">
            @if (Model.User.IsOnline)
            {
                @Model.User.IsOnline.PresenceFormat()
            }
            else
            {
                @await Component.InvokeAsync(nameof(HumanizedDate), new {date = Model.LastVisitDate, emptyValue = "учетная запись не активирована"})
            }
        </div>
    </div>
    @if (Model.WarningsCount > 0)
    {
        <div class="profile-field-wrapper">
            <div class="profile-field-label">Получено баллов предупреждений:</div>
            <div class="profile-field-value @warningsClass">@Model.WarningsCount</div>
        </div>
    }

    <div class="profile-actions">
        @await Html.PartialAsync("Actions/ProfileActions", Model.ProfileActions)
    </div>

    <div class="profile-field-wrapper">
        <div class="profile-field-label">Как зовут</div>
        @await Html.PartialAsync("ProfileDataField", Model, new ViewDataDictionary(ViewData) {{"Type", PersonalDataField.Name}, {"Value", Model.Name}})
    </div>
    <div class="profile-field-wrapper">
        <div class="profile-field-label">Где живет</div>
        @await Html.PartialAsync("ProfileDataField", Model, new ViewDataDictionary(ViewData) {{"Type", PersonalDataField.Location}, {"Value", Model.Location}})
    </div>
    @if (Model.ShowEmail)
    {
        <div class="profile-field-wrapper">
            <div class="profile-field-label">E-mail</div>
            <div class="profile-field-value">@Model.Email</div>
        </div>
    }
    <div class="profile-field-wrapper">
        <div class="profile-field-label">ICQ</div>
        @await Html.PartialAsync("ProfileDataField", Model, new ViewDataDictionary(ViewData) {{"Type", PersonalDataField.Icq}, {"Value", Model.Icq}})
    </div>
    <div class="profile-field-wrapper">
        <div class="profile-field-label">Skype</div>
        @await Html.PartialAsync("ProfileDataField", Model, new ViewDataDictionary(ViewData) {{"Type", PersonalDataField.Skype}, {"Value", Model.Skype}})
    </div>

</div>

<div class="profile-data">
    <div class="profile-data-tabs">
        <a href="javascript:void(0)" class="tabLink active" data-tab-id="About">О себе</a>
        <a href="@Url.Action("GetModules", new {Model.User.Login})" class="tabLink" data-tab-id="Modules">Игры</a>
        <a href="@Url.Action("GetCharacters", new {Model.User.Login})" class="tabLink" data-tab-id="Characters">Персонажи</a>
        @if (Model.CanEditSettings)
        {
            <a href="@Url.Action("GetUserSettings", new {Model.User.Login})" class="tabLink" data-tab-id="Settings">Настройки</a>
        }
    </div>

    <div class="tabBlock" id="About" data-tab-uploaded="true">
        @if (Model.CanEdit)
        {
            <a href="javascript:void(0)" class="profile-edit-link" id="EditProfileInfoLink">@IconFont.Render(IconType.Edit)</a>
        }
        <div id="ProfileInfo">
            @if (!string.IsNullOrEmpty(Model.Info))
            {
                @Html.Raw(Model.Info)
            }
            else
            {
                @:Пользователь решил ничего не указывать
            }
        </div>
        @await Html.PartialAsync("EditInfo/EditInfoForm", Model.EditInfoForm)

        <div style="font-family: Iconic;" id="Test"></div>
    </div>
    <div class="tabBlock" id="Modules"></div>
    <div class="tabBlock" id="Characters"></div>
    @if (Model.CanEdit)
    {
        <div class="tabBlock" id="Settings"></div>
    }
</div>
@section Lightboxes {
    @* @await Html.PartialAsync("~/Views/Profile/ReportUser/ReportUserForm.cshtml", Model.ReportUserForm) *@
}
@section FooterScript {
    <script>
        var profile = new DM.ProfileControl({
            getProgressUrl: "@Url.Action("Progress", "ProfilePictureUpload")",
            getNewFormUrl:
                "@Url.Action("GetForm", "ProfilePictureUpload", new RouteValueDictionary {{"userId", Model.UserId}})"
        });
        var roomCharactersControl = new DM.RoomCharactersControl();
        DM.Ready();
    </script>
}