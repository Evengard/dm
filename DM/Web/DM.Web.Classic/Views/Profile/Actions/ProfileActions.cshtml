@using DM.Web.Classic.Extensions.IconFontExtensions
@using Microsoft.AspNetCore.Routing
@model DM.Web.Classic.Views.Profile.Actions.ProfileActionsViewModel

@if (Model.CanWriteMessages)
{
    <a href="@Url.Action("LastUnread", "Conversations", new RouteValueDictionary{{"login", Model.Login}})" class="profile-actions-link">
        @IconFont.Render(IconType.Letter, new Dictionary<string, object>{{"class", "profile-actions-icon"}})
        Написать сообщение
    </a>
}
@if (Model.CanReportUser && Model.CanReport)
{
    <a href="javascript:void(0)" class="profile-actions-link" id="ReportUserLink">
        @IconFont.Render(IconType.Warning, new Dictionary<string, object> {{"class", "profile-actions-icon"}})
        Пожаловаться
    </a>
    <div class="profile-action-success" id="ReportUserSuccessMessage">
        @IconFont.Render(IconType.Tick) Жалоба успешно отправлена!
    </div>
}
@if (Model.CanViewStatistics)
{
    <a href="javascript:void(0)" class="profile-actions-link">
        @IconFont.Render(IconType.Stats, new Dictionary<string, object>{{"class", "profile-actions-icon"}})
        Статистика
    </a>
}
@if (Model.CanEdit)
{
    <a href="@Url.Action("LogOutElsewhere", "Account", new {Model.UserId})" class="profile-actions-link" id="CloseSessionsLink">
        @IconFont.Render(IconType.Logout, new Dictionary<string, object> {{"class", "profile-actions-icon"}})
        Выход с других устройств
    </a>
    <div class="profile-action-success" id="CloseSessionsSuccessMessage">
        @IconFont.Render(IconType.Tick) Вы успешно вышли из своей учётной записи с других устройств!
    </div>
    <a href="@Url.Action("EditEmail", "Profile")" class="profile-actions-link" id="ChangeEmailLink">
        @IconFont.Render(IconType.Edit, new Dictionary<string, object> { { "class", "profile-actions-icon" } }) Сменить E-mail
    </a>
    <div class="profile-action-success" id="EmailChangeSuccessMessage">
        @IconFont.Render(IconType.Tick) E-mail успешно изменен!
    </div>
    <a href="@Url.Action("EditPassword", "Profile")" class="profile-actions-link" id="ChangePasswordLink">
        @IconFont.Render(IconType.Lock, new Dictionary<string, object> { { "class", "profile-actions-icon" } }) Сменить пароль
    </a>
    <div class="profile-action-success" id="PasswordChangeSuccessMessage">
        @IconFont.Render(IconType.Tick) Пароль успешно изменен!
    </div>
}
@if (Model.CanModerate)
{
    <a href="@Model.AdministrativeUrl" class="profile-actions-link" id="UserAdminPanelLink">
        @IconFont.Render(IconType.UserSettings, new Dictionary<string, object> { { "class", "profile-actions-icon" } }) Перейти в административную панель
    </a>
}
@if (Model.CanLogin)
{
    <a href="@Url.Action("LogInAs", "Account", new RouteValueDictionary {{"userId", Model.UserId}})" class="profile-actions-link">
        @IconFont.Render(IconType.User, new Dictionary<string, object> {{"class", "profile-actions-icon"}})
        Войти под юзером
    </a>
}
@if (Model.CanCompleteMerge)
{
    <a href="@Url.Action("CompleteMerge", "MergeProfile")" class="profile-actions-link" id="CompleteMergeLink">
        @IconFont.Render(IconType.Sum, new Dictionary<string, object> { { "class", "profile-actions-icon" } }) Объединить профили
    </a>
    <div class="profile-action-success" id="CompleteMergeSuccessMessage">
        @IconFont.Render(IconType.Tick) Профили успешно объединены!<br/>
        <a href="@Url.Action("Index", new RouteValueDictionary{{"login", null}})">@IconFont.Render(IconType.Refresh) Обновите страницу</a>
    </div>
}
else if (Model.CanInitiateMerge)
{
    <a href="@Url.Action("InitiateMerge", "MergeProfile")" class="profile-actions-link" id="InitiateMergeLink">
        @IconFont.Render(IconType.Sum, new Dictionary<string, object> { { "class", "profile-actions-icon" } }) Объединить профили
    </a>
    <div class="profile-action-success" id="InitiateMergeSuccessMessage">
        @IconFont.Render(IconType.Tick) Запрос на объединение профиля успешно отправлен!
    </div>
}