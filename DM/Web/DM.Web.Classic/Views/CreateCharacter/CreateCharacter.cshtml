@using DM.Web.Classic.Extensions.HtmlHelperExtensions
@using DM.Web.Classic.Extensions.HtmlHelperExtensions.Dropdown
@using DM.Web.Classic.Extensions.IconFontExtensions
@using DM.Web.Classic.Views.GameActions
@using Microsoft.AspNetCore.Routing
@model DM.Web.Classic.Views.CreateCharacter.CharacterCreateForm
@{
    ViewBag.Title = "Создание персонажа";
    Layout = "~/Views/Shared/Layout/_TwoColumnLayout.cshtml";
}
@section LeftColumn
{
    @await Html.PartialAsync("Layout/GameLeftColumn", PageType.CharacterCreate, new ViewDataDictionary(ViewData) {{"ModuleId", Model.GameId}})
}

<h1 class="content-pageTitle">Создание персонажа</h1>

@await Html.PartialAsync("CharacterPictureUpload/Upload", Guid.Empty)

@using (Html.BeginForm("Create", "CreateCharacter", FormMethod.Post))
{
    @Html.HiddenFor(m => m.GameId)
    @Html.HiddenFor(m => m.PictureUploadRootId)
    <div class="form-field-wrapper">
        @Html.LabelFor(m => m.Name, "Имя", new {@class = "form-field-label"})
        @Html.TextBoxFor(m => m.Name)
        @Html.ValidationMessageFor(m => m.Name)
    </div>
    <div class="form-field-wrapper">
        @Html.LabelFor(m => m.Race, "Раса", new {@class = "form-field-label"})
        @Html.TextBoxFor(m => m.Race)
        @Html.ValidationMessageFor(m => m.Race)
    </div>
    <div class="form-field-wrapper">
        @Html.LabelFor(m => m.Class, "Класс", new {@class = "form-field-label"})
        @Html.TextBoxFor(m => m.Class)
        @Html.ValidationMessageFor(m => m.Class)
    </div>

    if (Model.DisplayAlignment)
    {
        <div class="form-field-wrapper">
            @Html.LabelFor(m => m.Alignment, "Мировоззрение", new {@class = "form-field-label"})
            @Html.DropdownFor(m => m.Alignment, wrapperHtmlAttributes: new Dictionary<string, object> {{"style", "width: 200px;"}})
        </div>
    }

    @*<div class="form-field-group" style="clear: left;">
        @Html.EditorFor(m => m.CharacterAttributes)
    </div>*@

    <div class="form-field-wrapper">
        @Html.LabelFor(m => m.Appearance, "Внешность", new {@class = "form-field-label"})
        @await Html.SmartTextAreaFor(m => m.Appearance, Model.Parser)
    </div>
    <div class="form-field-wrapper">
        @Html.LabelFor(m => m.Temper, "Характер", new {@class = "form-field-label"})
        @if (Model.TemperHidden)
        {
            @IconFont.Render(IconType.Spoiler)
            @:содержимое будет скрыто от остальных игроков
        }
        @await Html.SmartTextAreaFor(m => m.Temper, Model.Parser)
    </div>
    <div class="form-field-wrapper">
        @Html.LabelFor(m => m.Story, "История", new {@class = "form-field-label"})
        @if (Model.StoryHidden)
        {
            @IconFont.Render(IconType.Spoiler)
            @:содержимое будет скрыто от остальных игроков
        }
        @await Html.SmartTextAreaFor(m => m.Story, Model.Parser)
    </div>
    <div class="form-field-wrapper">
        @Html.LabelFor(m => m.Skills, "Навыки", new {@class = "form-field-label"})
        @if (Model.SkillsHidden)
        {
            @IconFont.Render(IconType.Spoiler)
            @:содержимое будет скрыто от остальных игроков
        }
        @await Html.SmartTextAreaFor(m => m.Skills, Model.Parser)
    </div>
    <div class="form-field-wrapper">
        @Html.LabelFor(m => m.Inventory, "Инвентарь", new { @class = "form-field-label" })
        @if (Model.InventoryHidden)
        {
            @IconFont.Render(IconType.Spoiler)
            @:содержимое будет скрыто от остальных игроков
        }
        @await Html.SmartTextAreaFor(m => m.Inventory, Model.Parser)
    </div>
    if (Model.HasMasterAccess)
    {
        <div class="form-field-wrapper">
            <label>@Html.CheckBoxFor(m => m.IsNpc) Считать данного персонажа NPC</label>
        </div>
    }
    else
    {
        <div class="form-field-wrapper">
            <label>@Html.CheckBoxFor(m => m.MasterEditAllowed) Разрешить мастеру редактировать персонажа</label>
        </div>
        <div class="form-field-wrapper">
            <label>@Html.CheckBoxFor(m => m.MasterPostsEditAllowed) Разрешить мастеру редактировать сообщения от лица этого персонажа</label>
        </div>
    }
    @Html.Submit("Создать", new Dictionary<string, object> {{"class", "form-submit-button"}})
}

@section FooterScript
{
    <script>
        var createCharacterControl = new DM.EditCharacterControl({
            getProgressUrl: "@Url.Action("Progress", "CharacterPictureUpload")",
            getNewFormUrl: "@Url.Action("GetForm", "CharacterPictureUpload", new RouteValueDictionary{{"characterId", Guid.Empty}})"
        });
        DM.Ready();
    </script>
}