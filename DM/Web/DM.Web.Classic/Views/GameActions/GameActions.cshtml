@using DM.Services.Core.Extensions
@using DM.Web.Classic.Extensions.IconFontExtensions
@using DM.Web.Classic.ViewComponents.LeftBar
@using DM.Web.Classic.Views.GameActions
@using Microsoft.AspNetCore.Routing
@model DM.Web.Classic.Views.GameActions.GameActionsViewModel
<h2 class="content-mediumTitle">@Model.GameTitle</h2>
<ul class="leftMenu-list">
    <li class="leftMenu-list-item">
        @await Component.InvokeAsync(nameof(GameRooms), new{ gameId = Model.GameId, pageType = Model.PageType, pageId = Model.PageId})
    </li>
    @if (Model.CanReadCommentaries)
    {
        <li class="leftMenu-list-item">
            -
            @if (Model.PageType == PageType.Discussions)
            {
                <strong>Обсуждение</strong>
            }
            else
            {
                <a href="@Url.Action("LastUnread", "ModuleCommentaries", new RouteValueDictionary {{"gameIdEncoded", Model.GameId.EncodeToReadable(Model.GameTitle)}})">
                    Обсуждение&nbsp;@Html.UnreadCommentsIcon(Model.UnreadCommentariesCount, true)
                </a>
            }
        </li>
    }
    <li class="leftMenu-list-item">
        -
        @if (Model.PageType == PageType.Information)
        {
            <strong>Информация</strong>
        }
        else
        {
            @Html.ActionLink("Информация", "Index", "Game", new RouteValueDictionary {{"gameId", Model.GameId.EncodeToReadable(Model.GameTitle)}}, null)
        }
    </li>
    <li class="leftMenu-list-item">
        -
        @if (Model.PageType == PageType.Characters)
        {
            <strong>Персонажи</strong>
        }
        else
        {
            @Html.ActionLink("Персонажи", "Index", "CharactersList", new RouteValueDictionary {{"gameId", Model.GameId.EncodeToReadable(Model.GameTitle) } }, null)
        }
    </li>
</ul>
<br/>
<ul class="leftMenu-list">
    @if (Model.CanTakeOnPremoderation)
    {
        <li class="leftMenu-list-item">
            @Html.ActionLink("Взять на премодерацию", "Premoderate", "EditModuleStatus", new RouteValueDictionary {{"gameId", Model.GameId}}, new Dictionary<string, object> {{"id", "PremoderateLink"}})
        </li>
    }
    @if (Model.CanCreateCharacter && !Model.CanCreateNpc)
    {
        <li class="leftMenu-list-item">
            @if (Model.PageType == PageType.CharacterCreate)
            {
                <strong>Подать заявку на участие</strong>
            }
            else
            {
                @Html.ActionLink("Подать заявку на участие", "Create", "CreateCharacter", new RouteValueDictionary {{"gameId", Model.GameId.EncodeToReadable(Model.GameTitle)}}, new Dictionary<string, object> {{"class", "moduleActions-createCharacterLink"}})
            }
        </li>
    }
    @if (Model.CanObserve)
    {
        <li class="leftMenu-list-item">
            @Html.ActionLink("Наблюдать за игрой", "Observe", "Module", new RouteValueDictionary {{"gameId", Model.GameId.EncodeToReadable(Model.GameTitle)}}, null)
        </li>
    }
    @if (Model.CanStopObserving)
    {
        <li class="leftMenu-list-item">
            @Html.ActionLink("Прекратить наблюдение за игрой", "StopObserving", "Module", new RouteValueDictionary {{"gameId", Model.GameId.EncodeToReadable(Model.GameTitle)}}, null)
        </li>
    }
    @if (Model.CanCreateNpc)
    {
        <li class="leftMenu-list-item">
            @if (Model.PageType == PageType.CharacterCreate)
            {
                <strong>Создать персонажа</strong>
            }
            else
            {
                @Html.ActionLink("Создать персонажа", "Create", "CreateCharacter", new RouteValueDictionary {{"gameId", Model.GameId.EncodeToReadable(Model.GameTitle)}}, null)
            }
        </li>
    }
    @if (Model.CanEditInfo)
    {
        <li class="leftMenu-list-item">
            @if (Model.PageType == PageType.Settings)
            {
                <strong>Настройки игры</strong>
            }
            else
            {
                @Html.ActionLink("Настройки игры", "Index", "ModuleSettings", new RouteValueDictionary {{"gameId", Model.GameId.EncodeToReadable(Model.GameTitle)}}, null)
            }
        </li>
    }
    @if (Model.CanChangeStatus)
    {
        <li class="leftMenu-list-item">
            @Html.ActionLink("Сменить статус", "EditStatus", "EditModuleStatus", new RouteValueDictionary {{"gameId", Model.GameId.EncodeToReadable(Model.GameTitle)}}, new Dictionary<string, object> {{"id", "GetEditModuleStatusLink"}})
        </li>
    }
</ul>