@using DM.Web.Classic.Extensions.IconFontExtensions
@using DM.Web.Classic.Extensions.UserExtensions
@using DM.Web.Classic.ViewComponents.Shared.HumanDate
@using Microsoft.AspNetCore.Routing
@model DM.Web.Classic.Views.Shared.Commentaries.CommentaryViewModel
<div class="comment js-entity-wrapper" id="Entity_@(Model.CommentaryId)" data-entity-id="@Model.CommentaryId">
    <div class="comment-wrapper" id="EntityContent_@(Model.CommentaryId)">
        <div class="comment-actions">
            @if (Model.CanEdit)
            {
                <a href="@Url.Action("Edit", "EditCommentary", new RouteValueDictionary {{"commentaryId", Model.CommentaryId}})" id="EditEntityLink_@(Model.CommentaryId)">@IconFont.Render(IconType.Edit)</a>
            }
            @if (Model.CanRemove)
            {
                <a href="@Url.Action("Remove", "Commentaries", new RouteValueDictionary {{"commentaryId", Model.CommentaryId}})" id="RemoveEntityLink_@(Model.CommentaryId)">@IconFont.Render(IconType.Remove)</a>
            }
        </div>
        <div class="comment-content">@Html.Raw(Model.Text)</div>
        <div class="comment-data">
            @Html.UserLink(Model.Author, withBadge: true),
            @await Component.InvokeAsync(nameof(HumanizedDate), new {date = Model.CreateDate})
            @if (Model.LastUpdateDate.HasValue)
            {
                @:(последний раз редактировался @await Component.InvokeAsync(nameof(HumanizedDate), new {date = Model.LastUpdateDate.Value}))
            }
            <span class="comment-likes-wrapper@(Model.LikesCount > 0 ? " comment-likes-wrapper-hasLikes" : string.Empty)">
                @if (Model.CanLike)
                {
                    <a href="@Url.Action("ToggleLike", "Commentaries", new RouteValueDictionary {{"commentaryId", Model.CommentaryId}})" class="comment-likes @(Model.HasLiked ? "comment-likes-active" : string.Empty)" id="ToggleEntityLikeLink_@(Model.CommentaryId)">
                        @IconFont.Render(IconType.Like, new Dictionary<string, object> { { "class", "comment-likes-icon" } })
                        <span id="EntityLikesCounter_@(Model.CommentaryId)">
                            @if (Model.LikesCount > 0)
                            {
                                @Model.LikesCount
                            }
                        </span>
                    </a>
                }
                else if (Model.LikesCount > 0)
                {
                    <span class="comment-likes">
                        @IconFont.Render(IconType.Like, new Dictionary<string, object> { { "class", "comment-likes-icon" } }) @Model.LikesCount
                    </span>
                }
            </span>
        </div>
    </div>
    <div class="comment-edit-form-wrapper"></div>
</div>